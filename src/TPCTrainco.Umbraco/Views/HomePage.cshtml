@using TPCTrainco.Umbraco.Extensions
@using TPCTrainco.Umbraco.Extensions.Helpers
@using Umbraco.Web
@using Umbraco.Core.Models
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "Base.cshtml";

    IPublishedContent siteSettings = Nodes.Instance.SiteSettings;
    IPublishedContent currentPage = Model.Content;

    IPublishedContent onsitePromo = siteSettings.GetPropertyValue<IPublishedContent>("activePromo");
    IEnumerable<IPublishedContent> activeSeminarList = currentPage.GetPropertyValue<IEnumerable<IPublishedContent>>("activeSeminars");

}

<div class="container-fluid intro-section">
    <div class="jumbotron">
        <h1>@(currentPage.GetPropertyValue<string>("welcomeHeadline"))</h1>
        @Html.Raw(currentPage.GetPropertyValue<string>("welcomeMessage"))
    </div>

    @Html.Partial("SeminarSearch/MainSearch", currentPage)
</div>


@Html.Partial("Promos/OnsitePromo", currentPage)

@{
    int seminarCount = 0;

    foreach (IPublishedContent section in activeSeminarList)
    {
        var displayOpposite = seminarCount % 2 == 0;

        @Html.Raw(RenderSeminar(section, !displayOpposite))

        seminarCount++;
    }
}

@Html.Partial("Quotes/UserQuotes", currentPage)


@helper RenderSeminar(IPublishedContent section, bool displayOpposite = false)
{
string headline = section.GetPropertyValue<string>("headline");
string message = section.GetPropertyValue<string>("description");
string iconUrl = section.GetCropUrl("icon", "Image");
IEnumerable<IPublishedContent> seminarNodeList = section.GetPropertyValue<IEnumerable<IPublishedContent>>("seminarLink");

string cost = "";
string registerUrl = "#";

if (seminarNodeList != null && seminarNodeList.Count() > 0)
{
    IPublishedContent seminarNode = seminarNodeList.First();

    registerUrl = seminarNode.Url;

    if (seminarNode.HasValue("courseLink"))
    {
        COURS course = TPCTrainco.Umbraco.Extensions.Objects.CacheObjects.GetCourseList().Where(p => p.CourseID == seminarNode.GetPropertyValue<int>("courseLink")).FirstOrDefault();

        if (course != null && !string.IsNullOrEmpty(course.CourseFeeDescription))
        {
            cost = course.CourseFeeDescription.Replace(Environment.NewLine, " / ").ToLower();
        }
    }
}

    <div class="container-fluid img-with-text@(displayOpposite ? " offwhite-section" : "")">
        <div class="container">
            <div class="row">
                <div class="col-sm-8@(!displayOpposite ? " col-sm-push-4" : "")">
                    <h2 class="callout-headline">@headline</h2>
                    @Html.Raw(message)
                    <p class="course-cost">@(cost)</p>
                    <a href="@(registerUrl)" class="btn-reg" role="button">Register</a>
                </div>
                <div class="col-sm-4@(!displayOpposite ? " col-sm-pull-8" : "")">
                    <a href="@(registerUrl)"><img src="@iconUrl" class="img-responsive home-highlight-circle" alt="image"></a>
                </div>
            </div>
        </div>
    </div>



}