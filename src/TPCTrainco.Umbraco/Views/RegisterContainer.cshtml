@using TPCTrainco.Umbraco.Extensions.Objects
@using TPCTrainco.Umbraco.Extensions
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "Base.cshtml";

    List<temp_Reg> cartList = null;
    string cartGuid = null;
    string tokenKey = null;
    int attendeeInc = 0;

    if (Request.QueryString["cart"] != null && Request.QueryString.Get("cart").Length > 0)
    {
        cartGuid = Request.QueryString.Get("cart").ToLower().Trim().Replace("\"","");
    }
    else
    {
        cartGuid = Carts.GetCartGuid(Session);
    }

    if (Request.QueryString["token"] != null && Request.QueryString.Get("token").Length > 0)
    {
        tokenKey = Request.QueryString.Get("token");
        tokenKey = tokenKey.Trim('"');
        tokenKey = tokenKey.Trim();
    }
    else
    {
        tokenKey = Users.GetToken(Session);
    }

    if (false == string.IsNullOrEmpty(tokenKey))
    {
        Users.SetToken(Session, tokenKey);
    }


    if (false == string.IsNullOrWhiteSpace(cartGuid))
    {
        Carts cartsObj = new Carts();

        cartList = cartsObj.GetCart(cartGuid);

        int totalItems = 0;
        decimal cartTotal = 0;

        if (cartList == null)
        {
            Response.Redirect("/search-seminars/?error=10");
        }
        else
        {
            Session["CartId"] = cartGuid;
            CartCookies.Set(cartGuid);

            bool hasOldItems = false;

            if (cartList != null)
            {
                foreach (temp_Reg regItem in cartList)
                {
                    SCHEDULE scheduleFound = CacheObjects.GetScheduleList().Where(p => p.ScheduleID == regItem.sem_SID).FirstOrDefault();

                    if (scheduleFound != null)
                    {
                        if (scheduleFound.ScheduleDate < DateTime.Now)
                        {
                            hasOldItems = true;
                        }
                    }
                }
            }

            if (true == hasOldItems)
            {
                Response.Redirect("/search-seminars/?error=12");
            }
            else
            {
                cartsObj.DeleteTempAtt(cartList[0].reg_ID);
                cartsObj.DeleteTempCust(cartList[0].reg_ID);

                totalItems = cartList.Count;
                cartTotal = cartList.Sum(p => p.sem_FeeAmt) ?? 0;
            }
        }
    }
    else
    {
        Response.Redirect("/search-seminars/?error=11");
    }
    IPublishedContent node = TPCTrainco.Umbraco.Extensions.Helpers.Nodes.Instance.SeminarSearch;
    string simulcastMessage = "";
    if (node != null && node.HasProperty("simulcastAttendeeMessage"))
    {
        simulcastMessage = node.GetPropertyValue("simulcastAttendeeMessage").ToString();
    }
    string liveOnlineMessage = "";
    if (node != null && node.HasProperty("liveOnlineAttendeeMessage"))
    {
        liveOnlineMessage = node.GetPropertyValue("liveOnlineAttendeeMessage").ToString();
    }
}

@Html.Partial("Cart/ReadOnlyCart")
<div class="register-standalone">
    <div class="container-fluid register-top">

        <div class="container">
            <div class="jumbotron">
                @if (!String.IsNullOrEmpty(CurrentPage.pageHeadline))
            {
                    <h1>@CurrentPage.pageHeadline</h1>
                }
                else
                {
                    <h1>@CurrentPage.name</h1>
                }
                <ul class="indicator">
                    <li class="step step1 Registration"></li>
                    <li class="line line1"></li>
                    <li class="step step2 Payment"></li>
                    <li class="line line2"></li>
                    <li class="step step3 Review Order"></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="container-fluid form-container" data-cart="@cartGuid">

        @if (cartList != null)
        {
            foreach (temp_Reg seminar in cartList)
            {
                string courseFormatStr = null;
                bool bSimulcast = false;
                bool bOnline = false;
                using (var db = new americantraincoEntities())
                {
                    SCHEDULE schedule = db.SCHEDULES.Where(x => x.ScheduleID == seminar.sem_SID).FirstOrDefault();
                    if (schedule != null)
                    {
                        bSimulcast = schedule.ScheduleType.ToLower() == "simulcast";
                        bOnline = schedule.ScheduleType.ToLower() == "liveonline";                        
                        ScheduleCourseInstructor scheduleCourseInstructor = db.ScheduleCourseInstructors.Where(p => p.ScheduleID == schedule.ScheduleID).FirstOrDefault();
                        if (scheduleCourseInstructor != null)
                        {
                            COURS course = db.COURSES.Where(p => p.CourseID == scheduleCourseInstructor.CourseID).FirstOrDefault();
                            if (course != null)
                            {
                                CourseFormat courseFormat = db.CourseFormats.Where(p => p.CourseFormatID == course.CourseFormatID).FirstOrDefault();

                                if (courseFormat != null)
                                {
                                    courseFormatStr = courseFormat.CourseFormatName;
                                }
                            }
                        }
                    }
                }

                string[] locationDatesArray = seminar.sem_Place.Split(new string[] { " - " }, StringSplitOptions.None);

                string location = !bSimulcast && !bOnline ? locationDatesArray[0] : (bSimulcast ? "Simulcast" : "Goto Training");
                string seminarDates = locationDatesArray[1];

                <div class="col-md-12 form-item-wrapper" data-seminar="@(seminar.sem_SID)">
                    <div class="container">
                        <!-- top section for one workshop -->
                        <ul class="top-info">
                            <li><h2>Attendees for @(seminar.sem_Title + " - " + courseFormatStr)</h2><p></p></li>
                            <li><p>@(location)</p></li>
                            <li class="date"><p>@(seminarDates)</p></li>
                        </ul>
                        <!-- end -->

                        <div class="attendee-info-form-wrap">
                            @for (int i = 1; i <= seminar.sem_Qty; i++)
                            {
                                attendeeInc++;

                                <p class="class-option">Attendee #@(attendeeInc)</p>
                                <form class="reg-form">
                                    <div class="form-group col-xs-12 col-sm-6 col-md-3">
                                        <input id="firstname@(attendeeInc)" name="firstname" type="text" class="form-control required" placeholder="First Name">
                                    </div>

                                    <div class="form-group col-xs-12 col-sm-6 col-md-3">
                                        <input id="lastname@(attendeeInc)" name="lastname" type="text" class="form-control required" placeholder="Last Name">
                                    </div>

                                    <div class="form-group col-xs-12 col-sm-6 col-md-3">
                                        <input id="title@(attendeeInc)" name="title" type="text" class="form-control" placeholder="Title">
                                    </div>

                                    <div class="form-group col-xs-12 col-sm-6 col-md-3">
                                        <input id="email@(attendeeInc)" name="email" type="email" class="form-control @(bSimulcast || bOnline ? "required" : "")" placeholder="Email">
                                    </div>

                                    <input id="attendee@(i)" name="attendee" type="hidden" value="@(i)">
                                    <input id="attendeeInc@(i)" name="attendeeInc" type="hidden" value="@(attendeeInc)">
                                </form>
                            }
                            <div class="clearfix"></div>
                            @if (bSimulcast)
                            {
                                <div class="helper-text">@Html.Raw(simulcastMessage)</div>
                            }
                            @if (bOnline)
                            {
                                <div class="helper-text">@Html.Raw(liveOnlineMessage)</div>
                            }
                        </div>

                    </div>

                </div>
            }
        }

        <div class="col-md-12" style="min-height: 30px;">
            <div class="spinner checkout-loader">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>

        </div>
        <div class="row">
            <p class="checkout-err-msg" style="display: none; text-align:center;"></p>
        </div>
        <a id="reg-submit" class="btn-reg btn-blue-solid next-btn" href="/search-seminars/?error=900" data-page="1">Next</a>
    </div>
</div>