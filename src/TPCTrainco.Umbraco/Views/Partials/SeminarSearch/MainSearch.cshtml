@using TPCTrainco.Umbraco.Extensions
@using TPCTrainco.Umbraco.Extensions.Helpers
@using TPCTrainco.Umbraco.Extensions.Objects
@using TPCTrainco.Umbraco.Extensions.ViewModels
@using Umbraco.Web
@using Umbraco.Core.Models
@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedContent>
@{
    string searchButtonId = Model.DocumentTypeAlias == "HomePage" ? "search-btn-home" : "search-btn";
    string currentCityState = "";
    string geolocationLink = "";

    IPublishedContent homePage = Model.AncestorsOrSelf(1).First();
    IPublishedContent searchSeminarNode = Nodes.Instance.SeminarSearch;

    IPublishedContent seminarMainOverview = homePage.Children.FirstOrDefault(n => n.IsDocumentType("SeminarMainOverview"));
    IEnumerable<IPublishedContent> seminarCategoryList = seminarMainOverview.Children.Where(n => n.IsDocumentType("SeminarCategory"));

    IPublishedContent seminarCatalog = homePage.Descendants("SeminarCatalog").FirstOrDefault();

    //List locations

    List<City> cityList = CacheObjects.GetCityList();
    List<State> stateList = CacheObjects.GetStateList();

    string allIconUrl = "";
    string allTotalSeminars = "";

    if (seminarCatalog != null)
    {
        allIconUrl = seminarCatalog.GetCropUrl("searchIcon", "Image");

        if (true == seminarCatalog.HasValue("totalSeminars"))
        {
            allTotalSeminars = "<p class=\"num-seminars\">" + string.Format("{0:N0}", seminarCatalog.GetPropertyValue<decimal>("totalSeminars")) + " Total Seminars</p>";
        }

    }

    if (Request.QueryString["homeref"] != null && Request.QueryString.Get("homeref").Length > 0)
    {

    }
    else
    {
        //Get current GeoCoordinate
        string ipAddress = System.Web.HttpContext.Current.Request.UserHostAddress;
        TPCTrainco.Umbraco.Extensions.Models.CoordinateDetails coordDetails = GeoCoordinates.GetCoordinateDetailsFromIp(ipAddress);
        if (coordDetails != null)
        {
            string city = coordDetails.City;
            currentCityState = city + ", " + coordDetails.StateCode;
            IEnumerable<IPublishedContent> locationNodes = homePage.Children.Where(x => x.IsDocumentType("LocationSeminar"));
            if (locationNodes.Count() > 0)
            {
                IPublishedContent node = locationNodes.Where(x => x.HasProperty("location") && x.GetPropertyValue("location").ToString() == city).FirstOrDefault();
                if (node != null)
                {
                    geolocationLink = umbraco.library.NiceUrl(node.Id);
                }
            }
        }
    }
}
<script>
    window.currentCityValue = '@currentCityState';
    window.geoLocationLink = '@geolocationLink';
</script>
<div ng-controller="MainSearchController as vm">
  <div class="row">
    <div class="col-md-11 topic-circles">
      <h3>Select one or more topics and choose your location</h3>
      <ul>

      <li class="seminar-topic">
                <div class="overlay-contain" data-topic="all">
                    <div class="overlay"></div>
                    <img src="@Html.Raw(allIconUrl)" alt="All Seminar Topics" />
                </div>
                <p class="seminar-title">All Seminar Topics</p>

                @Html.Raw(allTotalSeminars)
            </li>
            @foreach (IPublishedContent category in seminarCategoryList)
            {
                string shortName = category.GetPropertyValue<string>("shortName");
                string iconUrl = category.GetCropUrl("searchIcon", "Image");
                string dataTopic = shortName.ToLower();
                string totalSeminars = "";

                if (true == category.HasValue("totalSeminars"))
                {
                    totalSeminars = "<p class=\"num-seminars\">" + string.Format("{0:N0}", category.GetPropertyValue<decimal>("totalSeminars")) + " Seminars</p>";
                }

                if (dataTopic == "plant management")
                {
                    dataTopic = "management";
                }
                else if (dataTopic == "mechanical and industrial")
                {
                    dataTopic = "mechanical";
                }

                <li id="courseTopicsWrap" class="seminar-topic">
                    <div class="overlay-contain" ng-class="{'chosen': vm.classTopics.@dataTopic}" data-topic="@dataTopic">

                    <input id="@dataTopic" type="checkbox" name="@dataTopic" ng-model="vm.classTopics.@dataTopic">
                    <label class="checkbox-inline" for="@dataTopic"></label>
                        <div class="overlay"></div>
                        <img src="@iconUrl" alt="@category.Name" />
                    </div>
                    <p class="seminar-title">@shortName</p>

                    @Html.Raw(totalSeminars)
                </li>
            }
        </ul>
		<select selector
			model="vm.courseSearch.location"
			multi="false"
			options="vm.cities"
			value-attr="label"
			placeholder="Choose a City, Enter a Zip Code, or Select 'All Locations'"
			create="vm.createFunction(input)"
      required>
    </select>
      <rzslider rz-slider-model="vm.sliderValues.minValue" rz-slider-high="vm.sliderValues.maxValue" rz-slider-options="vm.sliderValues.options"></rzslider>
      <a class="btn-reg btn-white" type="submit" ng-click="vm.doParamSearch(vm.course.classTopics)" id="search-btn" role="button">Search</a>
    </div>
  </div>
  </div>
